name: cron_job

# Controls when the workflow will run
on:
  # cron job every 2 hours
  schedule:
   - cron: '0 */2 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.WORK_TOKEN }}
          fetch-depth: 0
    
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run script and generate content
        run: |
          python main.py
          ls -al docs/
        env:
          OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
          CUSTOM_MODEL: ${{ secrets.CUSTOM_MODEL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          U_NAME: ${{ secrets.U_NAME }}

      - name: Setup Git Identity
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Create and update content branch
        run: |
          # Save generated content to a temporary directory
          mkdir -p /tmp/generated_content
          cp -R docs/* /tmp/generated_content/ 2>/dev/null || :
          
          # Create a new orphan branch (no history)
          git checkout --orphan temp-content-branch
          
          # Remove everything from the working directory
          git rm -rf --cached .
          git clean -fdx
          
          # Create docs directory and restore the generated content
          mkdir -p docs
          cp -R /tmp/generated_content/* docs/ 2>/dev/null || :
          
          # Stage all content
          git add docs/
          
          # Set timezone for the commit timestamp
          export TZ='Asia/Shanghai'
          
          # Create initial commit
          git commit -m "Auto Build at $(date +"%Y-%m-%d %H:%M")"
          
          # Force push to content-branch (replacing any existing history)
          git push -f origin temp-content-branch:content-branch
          
          # No need to switch back to original branch in this context
          echo "Content branch updated successfully"
      
      - name: Update GitHub Pages
        run: |
          # NOTE: For this to work, you need to update GitHub Pages settings to deploy from the content-branch instead of main
          # Go to Settings > Pages > Build and deployment > Branch > select "content-branch" and directory "/docs"
          echo "Content updated in content-branch, GitHub Pages will reflect changes automatically if configured correctly"
          echo "If GitHub Pages is still using main branch, please update it in repository settings"
